AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
Description: khana
Parameters:
  DBHOST:
    Description: Required. The Database hostname or URL
    Type: String
    Default: envDBHost
  DBNAME:
    Description: Required. The Database name
    Type: String
    Default: envDBName
  DBUSER:
    Description: Required. Db user
    Type: String
    Default: envDBUser
  DBPASSWORD:
    Description: Required. Db password
    Type: String
    Default: envDBPassword
  DBPORT:
    Description: Required. Db port
    Type: String
    Default: envDBWritePort
Globals:
  Function:
    Environment:
      Variables:
        DB_HOST:
          Ref: DBHOST
        DB_NAME:
          Ref: DBNAME
        DB_USER:
          Ref: DBUSER
        DB_PASSWORD:
          Ref: DBPASSWORD
        DB_PORT:
          Ref: DBPORT
        LIMIT: 10
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 60
    Layers:
    - Ref: CommonLayer
Resources:
  lambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-layer
      Description: Code shared across all lambda functions
      ContentUri: CommonLayer
      CompatibleRuntimes:
      - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
      SamResourceId: CommonLayer
  createCustomer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createCustomer
      Handler: index.handler
      FunctionName: postconsumer
      Description: A lambda to create customer.
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /createdCustomer
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: createCustomer
  manageConsAddress:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: manageConsAddress
      Handler: index.handler
      FunctionName: postaddress
      Description: A lambda to manage customer address.
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /managesConsAddress
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: manageConsAddress
  validateOTP:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: validateOTP
      Handler: index.handler
      FunctionName: postotp
      Description: A lambda to validate OTP
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /validatedOTP
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: validateOTP
  getConsAddresses:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getConsAddresses
      Handler: index.handler
      FunctionName: getaddress
      Description: A lambda to get list of consumer addresses
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getConsuAddresses
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: getConsAddresses
  signIn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: signIn
      Handler: index.handler
      FunctionName: postsign
      Description: A lambda to signIn
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /siignIn
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: signIn
  getPackageList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getPackageList
      Handler: index.handler
      FunctionName: postpack
      Description: A lambda to signIn
      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getpackageslist
            Method: POST
    Metadata:
      BuildMethod: nodejs18.x
      SamResourceId: getPackageList
